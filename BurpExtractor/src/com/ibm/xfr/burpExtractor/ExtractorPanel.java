package com.ibm.xfr.burpExtractor;


import java.awt.Component;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

import javax.swing.JOptionPane;

import burp.ITab;

public class ExtractorPanel extends javax.swing.JPanel implements ITab 
{
	private ExtractorScanner scanner;


	@Override
	public String getTabCaption()
	{
		return "Extractor";
	}


	@Override
	public Component getUiComponent()
	{
		return this;
	}
	

    /**
     * Creates new form ExtractorPanel
     */
    public ExtractorPanel(ExtractorScanner scanner) {
    	this.scanner = scanner;
        initComponents();
        applyButtonActionPerformed(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        serverLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();
        serverTextfield = new javax.swing.JTextField();
        serverTextfield.setText("127.0.0.1");
        portTextfield = new javax.swing.JTextField();
        portTextfield.setText("2063");
        serverLabel.setText("Server:");

        portLabel.setText("Port:");

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(portLabel)
                        .addGap(18, 18, 18)
                        .addComponent(portTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(applyButton))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLabel)
                    .addComponent(serverTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyButton)
                .addContainerGap(195, Short.MAX_VALUE))
        );
        
    }// </editor-fold>                        


	private void applyButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		server = serverTextfield.getText();
	
		InetAddress address;
		try
		{
			address = InetAddress.getByName(server);
		}
		catch (UnknownHostException e1)
		{
			JOptionPane.showMessageDialog(this, "Invalid server name or address", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		try
		{
			port = Integer.valueOf(portTextfield.getText());
		}
		catch (NumberFormatException e)
		{
			JOptionPane.showMessageDialog(this, "The port must be from 1-65535", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		if (port < 1 || port > 65535)
		{
			JOptionPane.showMessageDialog(this, "The port must be from 1-65535", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		try
		{
			scanner.updateSettings(address, port);
		}
		catch (IOException e)
		{
			JOptionPane.showMessageDialog(this, "Problem connecting to remote server.", "Error", JOptionPane.ERROR_MESSAGE);
		}
	}                               

    private String server;
    private int port;

    
    // Variables declaration - do not modify                     
    private javax.swing.JButton applyButton;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextfield;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JTextField serverTextfield;
    // End of variables declaration                   
}
